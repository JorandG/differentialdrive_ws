/* -------------------------------------------------------------------------- */
/*                                  INCLUDES                                  */
/* -------------------------------------------------------------------------- */

/* --------------------------------- Stream --------------------------------- */
#include <iostream>
/* -------------------------------------------------------------------------- */

/* ---------------------------------- Math ---------------------------------- */
#include <math.h>
/* -------------------------------------------------------------------------- */

/* ---------------------------------- Eigen --------------------------------- */
#include <eigen3/Eigen/Core>
#include <eigen3/Eigen/Geometry>
#include <eigen3/Eigen/Dense>
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */


/* -------------------------------------------------------------------------- */
/*                                   DEFINES                                  */
/* -------------------------------------------------------------------------- */
#ifndef PI
#define PI 3.1415926535
#endif
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                 ENUM TYPES                                 */
/* -------------------------------------------------------------------------- */
#ifndef KINEMATICS_AUXILIARY_FUNCTIONS_H_ENUMS
#define KINEMATICS_AUXILIARY_FUNCTIONS_H_ENUMS
    enum class axes {x_axis, y_axis, z_axis};
#endif
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                DECLARATIONS                                */
/* -------------------------------------------------------------------------- */

/* ------------------------------- Skew Matrix ------------------------------ */
Eigen::MatrixXd get_skew_matrix(Eigen::VectorXd vector_);
/* -------------------------------------------------------------------------- */

/* ----------------------- Elementary Rotation Matrix ----------------------- */
Eigen::Matrix3d get_elementary_rotation_matrix(double alpha, axes rotation_axis);
/* -------------------------------------------------------------------------- */

/* ------------------- Rotation Matrix to Unit Quaternion ------------------- */
Eigen::VectorXd rot2quat(Eigen::MatrixXd R);
/* -------------------------------------------------------------------------- */

/* ------------------- Unit Quaternion to Rotation Matrix ------------------- */
Eigen::Matrix3d quat2rot(Eigen::VectorXd e);
/* -------------------------------------------------------------------------- */

/* ------------------------- RPY to Rotation Matrix ------------------------- */
Eigen::Matrix3d rpy2rot(Eigen::Vector3d rpy);
/* -------------------------------------------------------------------------- */

/* ------------------------ Rotation Matrix to RPY v1 ----------------------- */
Eigen::Vector3d rot2rpy_1(Eigen::Matrix3d R);
/* -------------------------------------------------------------------------- */

/* ------------------------ Rotation Matrix to RPY v2 ----------------------- */
Eigen::Vector3d rot2rpy_2(Eigen::Matrix3d R);
/* -------------------------------------------------------------------------- */

/* ------------------------- RPY to Unit Quaternion ------------------------- */
Eigen::VectorXd rpy2quat(Eigen::Vector3d rpy);
/* -------------------------------------------------------------------------- */

/* ------------------------- Unit Quaternion to RPY ------------------------- */
Eigen::Vector3d quat2rpy(Eigen::VectorXd quat);
/* -------------------------------------------------------------------------- */

/* ---------------------- Rotation Matrix to Axis-Angle --------------------- */
Eigen::VectorXd R2axis(Eigen::Matrix3d R);
/* -------------------------------------------------------------------------- */

/* ---------------------- Axis-Angle to Rotation Matrix --------------------- */
Eigen::Matrix3d axis2R(Eigen::Vector3d k, double theta);
/* -------------------------------------------------------------------------- */

/* -------------------------- Unit Quaternion Error ------------------------- */
Eigen::VectorXd quatError(Eigen::VectorXd ed, Eigen::VectorXd e);
/* -------------------------------------------------------------------------- */

/* ---------------------------------- Sign ---------------------------------- */
int sign(double x);
/* -------------------------------------------------------------------------- */

/* --------------------------- Contact to Control --------------------------- */
Eigen::Vector3d contact2control(Eigen::Vector3d contact_point_, double b_);
/* -------------------------------------------------------------------------- */

/* --------------------------- Control to Contact --------------------------- */
Eigen::Vector3d control2contact(Eigen::Vector3d control_point_, double b_);
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */