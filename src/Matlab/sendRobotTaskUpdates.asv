function sendRobotTaskUpdates(robotID, humanID, ReAll, X1, MILPDataPub, MILPData, idx_going_tasks, num_filling_boxes, humanData, currentHumanTask)

% sendRobotTaskUpdates - Update and send task information for a specific robot
    %
    % Syntax:  sendRobotTaskUpdates(robotID, ReAll, X1, MILPDataPub, MILPData, idx_going_tasks, num_filling_boxes, humanData, currentHumanTask)
    %
    % Inputs:
    %    robotID - ID of the robot
    %    ReAll - Struct containing all reallocation data
    %    X1 - Task assignment matrix for all robots
    %    MILPDataPub - Array of ROS publishers for each robot
    %    MILPData - Array of ROS messages for each robot
    %    idx_going_tasks - Index array for 'going' tasks
    %    num_filling_boxes - Number of filling boxes (used for indexing task phases)
    %    humanData - Cell array of human data messages
    %    currentHumanTask - Current task index for the human
    %
    % Outputs:
    %    none

    global num_agents num_filling_boxes agents_ordered_allocation alreadyHere
 
    % Set Robot ID
    MILPData{robotID}.RobotID = robotID;
    MILPData{robotID}.GoingStart = agents_ordered_allocation(robotID).timeS(1:5:length(agents_ordered_allocation(robotID).timeS));
    MILPData{robotID}.WaitingStart = agents_ordered_allocation(robotID).timeS(2:5:length(agents_ordered_allocation(robotID).timeS));
    MILPData{robotID}.ApproachingStart = agents_ordered_allocation(robotID).timeS(3:5:length(agents_ordered_allocation(robotID).timeS));
    MILPData{robotID}.ServingStart = agents_ordered_allocation(robotID).timeS(4:5:length(agents_ordered_allocation(robotID).timeS));
    MILPData{robotID}.DepotStart = agents_ordered_allocation(robotID).timeS(5:5:length(agents_ordered_allocation(robotID).timeS));

    MILPData{robotID}.GoingFinish = agents_ordered_allocation(robotID).timeF(1:5:length(agents_ordered_allocation(robotID).timeF));
    MILPData{robotID}.WaitingFinish = agents_ordered_allocation(robotID).timeF(2:5:length(agents_ordered_allocation(robotID).timeF));
    MILPData{robotID}.ApproachingFinish = agents_ordered_allocation(robotID).timeF(3:5:length(agents_ordered_allocation(robotID).timeF));
    MILPData{robotID}.ServingFinish = agents_ordered_allocation(robotID).timeF(4:5:length(agents_ordered_allocation(robotID).timeF));
    MILPData{robotID}.DepotFinish = agents_ordered_allocation(robotID).timeF(5:5:length(agents_ordered_allocation(robotID).timeF));

    MILPData{robotID}.Humans = agents_ordered_allocation(robotID).humanop(1,1:5:(length(agents_ordered_allocation(robotID).humanop)))

    for t=1:num_filling_boxes
        MILPData{robotID}.DistanceWaiting(t) = humanData{MILPData{robotID}.Humans(t)}.RobotWaitingDistance(t);
    end

    if humanData{humanID}.ConfirmServing(currentHumanTask) == 1 && humanData{humanID}.Robots(currentHumanTask) == robotID && MILPData{robotID}.FinishedService(MILPData{robotID}.Tasks) == 0 %&& MILPData{robotID}.Humans(currentHumanTask) == humanID
        MILPData{robotID}.FinishedService(MILPData{robotID}.Tasks) = 1;  
        MILPData{robotID}.Tasks = MILPData{robotID}.Tasks + 1;
    end
    
    if humanData{humanID}.ConfirmFilling(currentHumanTask) == 1 && humanData{humanID}.Robots(currentHumanTask) == robotID %MILPData{robotID}.Humans(currentHumanTask) == humanID
        MILPData{robotID}.FinishedFilling(MILPData{robotID}.Tasks) = 1;     
    end

    
    % Send the updated data to the corresponding ROS topic
    send(MILPDataPub{robotID}, MILPData{robotID});
    
end