
classdef HumanRobotInteraction < ros.Message
    %HumanRobotInteraction MATLAB implementation of diff_drive_robot/HumanRobotInteraction
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'diff_drive_robot/HumanRobotInteraction' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8b0d76829ca619dc5634eb42ed8a3bfd' % The MD5 Checksum of the message definition
        PropertyList = { 'HumanID' 'RobotWaitingDistance' 'RobotVelocityProximity' 'RobotVelocityProximityWeight' 'WaitingTime' 'WaitingTimeWeight' 'StartFilling' 'FinishFilling' 'StartServing' 'FinishServing' 'TimeFilling' 'TimeServing' 'ConfirmServing' 'ConfirmFilling' 'Task' 'TaskFilling' } % List of non-constant message properties
        ROSPropertyList = { 'HumanID' 'RobotWaitingDistance' 'RobotVelocityProximity' 'RobotVelocityProximityWeight' 'WaitingTime' 'WaitingTimeWeight' 'StartFilling' 'FinishFilling' 'StartServing' 'FinishServing' 'TimeFilling' 'TimeServing' 'ConfirmServing' 'ConfirmFilling' 'Task' 'TaskFilling' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        HumanID
        RobotWaitingDistance
        RobotVelocityProximity
        RobotVelocityProximityWeight
        WaitingTime
        WaitingTimeWeight
        StartFilling
        FinishFilling
        StartServing
        FinishServing
        TimeFilling
        TimeServing
        ConfirmServing
        ConfirmFilling
        Task
        TaskFilling
    end
    methods
        function set.HumanID(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'HumanID');
            obj.HumanID = int32(val);
        end
        function set.RobotWaitingDistance(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'RobotWaitingDistance');
            obj.RobotWaitingDistance = double(val);
        end
        function set.RobotVelocityProximity(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'RobotVelocityProximity');
            obj.RobotVelocityProximity = double(val);
        end
        function set.RobotVelocityProximityWeight(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'RobotVelocityProximityWeight');
            obj.RobotVelocityProximityWeight = double(val);
        end
        function set.WaitingTime(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'WaitingTime');
            obj.WaitingTime = double(val);
        end
        function set.WaitingTimeWeight(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'WaitingTimeWeight');
            obj.WaitingTimeWeight = double(val);
        end
        function set.StartFilling(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'StartFilling');
            obj.StartFilling = double(val);
        end
        function set.FinishFilling(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'FinishFilling');
            obj.FinishFilling = double(val);
        end
        function set.StartServing(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'StartServing');
            obj.StartServing = double(val);
        end
        function set.FinishServing(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'FinishServing');
            obj.FinishServing = double(val);
        end
        function set.TimeFilling(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'TimeFilling');
            obj.TimeFilling = double(val);
        end
        function set.TimeServing(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'TimeServing');
            obj.TimeServing = double(val);
        end
        function set.ConfirmServing(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'ConfirmServing');
            obj.ConfirmServing = int32(val);
        end
        function set.ConfirmFilling(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'ConfirmFilling');
            obj.ConfirmFilling = int32(val);
        end
        function set.Task(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'Task');
            obj.Task = int32(val);
        end
        function set.TaskFilling(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HumanRobotInteraction', 'TaskFilling');
            obj.TaskFilling = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.diff_drive_robot.HumanRobotInteraction.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.diff_drive_robot.HumanRobotInteraction(strObj);
        end
    end
end
