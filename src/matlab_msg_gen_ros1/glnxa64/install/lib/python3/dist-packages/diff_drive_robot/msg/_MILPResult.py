# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from diff_drive_robot/MILPResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MILPResult(genpy.Message):
  _md5sum = "346b3371d221a89a547bcd481eb13161"
  _type = "diff_drive_robot/MILPResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 RobotID
int32[] Humans
float64[] GoingStart
float64[] ApproachingStart
float64[] WaitingStart 
float64[] ServingStart
float64[] DepotStart
float64[] GoingFinish
float64[] ApproachingFinish
float64[] WaitingFinish
float64[] ServingFinish
float64[] DepotFinish
int32[] FinishedOperation"""
  __slots__ = ['RobotID','Humans','GoingStart','ApproachingStart','WaitingStart','ServingStart','DepotStart','GoingFinish','ApproachingFinish','WaitingFinish','ServingFinish','DepotFinish','FinishedOperation']
  _slot_types = ['int32','int32[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RobotID,Humans,GoingStart,ApproachingStart,WaitingStart,ServingStart,DepotStart,GoingFinish,ApproachingFinish,WaitingFinish,ServingFinish,DepotFinish,FinishedOperation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MILPResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.RobotID is None:
        self.RobotID = 0
      if self.Humans is None:
        self.Humans = []
      if self.GoingStart is None:
        self.GoingStart = []
      if self.ApproachingStart is None:
        self.ApproachingStart = []
      if self.WaitingStart is None:
        self.WaitingStart = []
      if self.ServingStart is None:
        self.ServingStart = []
      if self.DepotStart is None:
        self.DepotStart = []
      if self.GoingFinish is None:
        self.GoingFinish = []
      if self.ApproachingFinish is None:
        self.ApproachingFinish = []
      if self.WaitingFinish is None:
        self.WaitingFinish = []
      if self.ServingFinish is None:
        self.ServingFinish = []
      if self.DepotFinish is None:
        self.DepotFinish = []
      if self.FinishedOperation is None:
        self.FinishedOperation = []
    else:
      self.RobotID = 0
      self.Humans = []
      self.GoingStart = []
      self.ApproachingStart = []
      self.WaitingStart = []
      self.ServingStart = []
      self.DepotStart = []
      self.GoingFinish = []
      self.ApproachingFinish = []
      self.WaitingFinish = []
      self.ServingFinish = []
      self.DepotFinish = []
      self.FinishedOperation = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.RobotID
      buff.write(_get_struct_i().pack(_x))
      length = len(self.Humans)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.Humans))
      length = len(self.GoingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.GoingStart))
      length = len(self.ApproachingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ApproachingStart))
      length = len(self.WaitingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.WaitingStart))
      length = len(self.ServingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ServingStart))
      length = len(self.DepotStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.DepotStart))
      length = len(self.GoingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.GoingFinish))
      length = len(self.ApproachingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ApproachingFinish))
      length = len(self.WaitingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.WaitingFinish))
      length = len(self.ServingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ServingFinish))
      length = len(self.DepotFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.DepotFinish))
      length = len(self.FinishedOperation)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.FinishedOperation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.RobotID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Humans = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.GoingStart = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ApproachingStart = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.WaitingStart = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ServingStart = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DepotStart = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.GoingFinish = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ApproachingFinish = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.WaitingFinish = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ServingFinish = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DepotFinish = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FinishedOperation = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.RobotID
      buff.write(_get_struct_i().pack(_x))
      length = len(self.Humans)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Humans.tostring())
      length = len(self.GoingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.GoingStart.tostring())
      length = len(self.ApproachingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ApproachingStart.tostring())
      length = len(self.WaitingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.WaitingStart.tostring())
      length = len(self.ServingStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ServingStart.tostring())
      length = len(self.DepotStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.DepotStart.tostring())
      length = len(self.GoingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.GoingFinish.tostring())
      length = len(self.ApproachingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ApproachingFinish.tostring())
      length = len(self.WaitingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.WaitingFinish.tostring())
      length = len(self.ServingFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ServingFinish.tostring())
      length = len(self.DepotFinish)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.DepotFinish.tostring())
      length = len(self.FinishedOperation)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.FinishedOperation.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.RobotID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Humans = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.GoingStart = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ApproachingStart = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.WaitingStart = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ServingStart = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DepotStart = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.GoingFinish = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ApproachingFinish = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.WaitingFinish = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ServingFinish = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DepotFinish = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FinishedOperation = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
