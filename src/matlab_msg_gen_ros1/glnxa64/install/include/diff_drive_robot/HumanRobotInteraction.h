// Generated by gencpp from file diff_drive_robot/HumanRobotInteraction.msg
// DO NOT EDIT!


#ifndef DIFF_DRIVE_ROBOT_MESSAGE_HUMANROBOTINTERACTION_H
#define DIFF_DRIVE_ROBOT_MESSAGE_HUMANROBOTINTERACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diff_drive_robot
{
template <class ContainerAllocator>
struct HumanRobotInteraction_
{
  typedef HumanRobotInteraction_<ContainerAllocator> Type;

  HumanRobotInteraction_()
    : HumanID(0)
    , Robots()
    , RobotWaitingDistance()
    , RobotVelocityProximity()
    , RobotMinVelocityProximity()
    , RobotMaxVelocityProximity()
    , RobotVelocityProximityWeight()
    , WaitingTime()
    , WaitingTimeWeight()
    , StartFilling()
    , FinishFilling()
    , StartServing()
    , FinishServing()
    , TimeFilling()
    , TimeServing()
    , ConfirmServing()
    , ConfirmFilling()
    , Task(0)
    , TaskFilling(0)
    , Happiness()
    , Efficiency()
    , Severity()  {
    }
  HumanRobotInteraction_(const ContainerAllocator& _alloc)
    : HumanID(0)
    , Robots(_alloc)
    , RobotWaitingDistance(_alloc)
    , RobotVelocityProximity(_alloc)
    , RobotMinVelocityProximity(_alloc)
    , RobotMaxVelocityProximity(_alloc)
    , RobotVelocityProximityWeight(_alloc)
    , WaitingTime(_alloc)
    , WaitingTimeWeight(_alloc)
    , StartFilling(_alloc)
    , FinishFilling(_alloc)
    , StartServing(_alloc)
    , FinishServing(_alloc)
    , TimeFilling(_alloc)
    , TimeServing(_alloc)
    , ConfirmServing(_alloc)
    , ConfirmFilling(_alloc)
    , Task(0)
    , TaskFilling(0)
    , Happiness(_alloc)
    , Efficiency(_alloc)
    , Severity(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _HumanID_type;
  _HumanID_type HumanID;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Robots_type;
  _Robots_type Robots;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _RobotWaitingDistance_type;
  _RobotWaitingDistance_type RobotWaitingDistance;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _RobotVelocityProximity_type;
  _RobotVelocityProximity_type RobotVelocityProximity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _RobotMinVelocityProximity_type;
  _RobotMinVelocityProximity_type RobotMinVelocityProximity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _RobotMaxVelocityProximity_type;
  _RobotMaxVelocityProximity_type RobotMaxVelocityProximity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _RobotVelocityProximityWeight_type;
  _RobotVelocityProximityWeight_type RobotVelocityProximityWeight;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _WaitingTime_type;
  _WaitingTime_type WaitingTime;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _WaitingTimeWeight_type;
  _WaitingTimeWeight_type WaitingTimeWeight;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _StartFilling_type;
  _StartFilling_type StartFilling;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _FinishFilling_type;
  _FinishFilling_type FinishFilling;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _StartServing_type;
  _StartServing_type StartServing;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _FinishServing_type;
  _FinishServing_type FinishServing;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _TimeFilling_type;
  _TimeFilling_type TimeFilling;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _TimeServing_type;
  _TimeServing_type TimeServing;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ConfirmServing_type;
  _ConfirmServing_type ConfirmServing;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ConfirmFilling_type;
  _ConfirmFilling_type ConfirmFilling;

   typedef int32_t _Task_type;
  _Task_type Task;

   typedef int32_t _TaskFilling_type;
  _TaskFilling_type TaskFilling;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Happiness_type;
  _Happiness_type Happiness;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Efficiency_type;
  _Efficiency_type Efficiency;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Severity_type;
  _Severity_type Severity;





  typedef boost::shared_ptr< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> const> ConstPtr;

}; // struct HumanRobotInteraction_

typedef ::diff_drive_robot::HumanRobotInteraction_<std::allocator<void> > HumanRobotInteraction;

typedef boost::shared_ptr< ::diff_drive_robot::HumanRobotInteraction > HumanRobotInteractionPtr;
typedef boost::shared_ptr< ::diff_drive_robot::HumanRobotInteraction const> HumanRobotInteractionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator1> & lhs, const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator2> & rhs)
{
  return lhs.HumanID == rhs.HumanID &&
    lhs.Robots == rhs.Robots &&
    lhs.RobotWaitingDistance == rhs.RobotWaitingDistance &&
    lhs.RobotVelocityProximity == rhs.RobotVelocityProximity &&
    lhs.RobotMinVelocityProximity == rhs.RobotMinVelocityProximity &&
    lhs.RobotMaxVelocityProximity == rhs.RobotMaxVelocityProximity &&
    lhs.RobotVelocityProximityWeight == rhs.RobotVelocityProximityWeight &&
    lhs.WaitingTime == rhs.WaitingTime &&
    lhs.WaitingTimeWeight == rhs.WaitingTimeWeight &&
    lhs.StartFilling == rhs.StartFilling &&
    lhs.FinishFilling == rhs.FinishFilling &&
    lhs.StartServing == rhs.StartServing &&
    lhs.FinishServing == rhs.FinishServing &&
    lhs.TimeFilling == rhs.TimeFilling &&
    lhs.TimeServing == rhs.TimeServing &&
    lhs.ConfirmServing == rhs.ConfirmServing &&
    lhs.ConfirmFilling == rhs.ConfirmFilling &&
    lhs.Task == rhs.Task &&
    lhs.TaskFilling == rhs.TaskFilling &&
    lhs.Happiness == rhs.Happiness &&
    lhs.Efficiency == rhs.Efficiency &&
    lhs.Severity == rhs.Severity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator1> & lhs, const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diff_drive_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d476374a890a24a3723780d1c56bf0f8";
  }

  static const char* value(const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd476374a890a24a3ULL;
  static const uint64_t static_value2 = 0x723780d1c56bf0f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diff_drive_robot/HumanRobotInteraction";
  }

  static const char* value(const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 HumanID\n"
"float64[] Robots\n"
"float64[] RobotWaitingDistance\n"
"float64[] RobotVelocityProximity\n"
"float64[] RobotMinVelocityProximity\n"
"float64[] RobotMaxVelocityProximity\n"
"float64[] RobotVelocityProximityWeight\n"
"float64[] WaitingTime\n"
"float64[] WaitingTimeWeight\n"
"float64[] StartFilling\n"
"float64[] FinishFilling\n"
"float64[] StartServing\n"
"float64[] FinishServing\n"
"float64[] TimeFilling\n"
"float64[] TimeServing\n"
"int32[] ConfirmServing\n"
"int32[] ConfirmFilling\n"
"int32 Task\n"
"int32 TaskFilling\n"
"float64[] Happiness\n"
"float64[] Efficiency\n"
"float64[] Severity\n"
;
  }

  static const char* value(const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.HumanID);
      stream.next(m.Robots);
      stream.next(m.RobotWaitingDistance);
      stream.next(m.RobotVelocityProximity);
      stream.next(m.RobotMinVelocityProximity);
      stream.next(m.RobotMaxVelocityProximity);
      stream.next(m.RobotVelocityProximityWeight);
      stream.next(m.WaitingTime);
      stream.next(m.WaitingTimeWeight);
      stream.next(m.StartFilling);
      stream.next(m.FinishFilling);
      stream.next(m.StartServing);
      stream.next(m.FinishServing);
      stream.next(m.TimeFilling);
      stream.next(m.TimeServing);
      stream.next(m.ConfirmServing);
      stream.next(m.ConfirmFilling);
      stream.next(m.Task);
      stream.next(m.TaskFilling);
      stream.next(m.Happiness);
      stream.next(m.Efficiency);
      stream.next(m.Severity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanRobotInteraction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diff_drive_robot::HumanRobotInteraction_<ContainerAllocator>& v)
  {
    s << indent << "HumanID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.HumanID);
    s << indent << "Robots[]" << std::endl;
    for (size_t i = 0; i < v.Robots.size(); ++i)
    {
      s << indent << "  Robots[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Robots[i]);
    }
    s << indent << "RobotWaitingDistance[]" << std::endl;
    for (size_t i = 0; i < v.RobotWaitingDistance.size(); ++i)
    {
      s << indent << "  RobotWaitingDistance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RobotWaitingDistance[i]);
    }
    s << indent << "RobotVelocityProximity[]" << std::endl;
    for (size_t i = 0; i < v.RobotVelocityProximity.size(); ++i)
    {
      s << indent << "  RobotVelocityProximity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RobotVelocityProximity[i]);
    }
    s << indent << "RobotMinVelocityProximity[]" << std::endl;
    for (size_t i = 0; i < v.RobotMinVelocityProximity.size(); ++i)
    {
      s << indent << "  RobotMinVelocityProximity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RobotMinVelocityProximity[i]);
    }
    s << indent << "RobotMaxVelocityProximity[]" << std::endl;
    for (size_t i = 0; i < v.RobotMaxVelocityProximity.size(); ++i)
    {
      s << indent << "  RobotMaxVelocityProximity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RobotMaxVelocityProximity[i]);
    }
    s << indent << "RobotVelocityProximityWeight[]" << std::endl;
    for (size_t i = 0; i < v.RobotVelocityProximityWeight.size(); ++i)
    {
      s << indent << "  RobotVelocityProximityWeight[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RobotVelocityProximityWeight[i]);
    }
    s << indent << "WaitingTime[]" << std::endl;
    for (size_t i = 0; i < v.WaitingTime.size(); ++i)
    {
      s << indent << "  WaitingTime[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.WaitingTime[i]);
    }
    s << indent << "WaitingTimeWeight[]" << std::endl;
    for (size_t i = 0; i < v.WaitingTimeWeight.size(); ++i)
    {
      s << indent << "  WaitingTimeWeight[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.WaitingTimeWeight[i]);
    }
    s << indent << "StartFilling[]" << std::endl;
    for (size_t i = 0; i < v.StartFilling.size(); ++i)
    {
      s << indent << "  StartFilling[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.StartFilling[i]);
    }
    s << indent << "FinishFilling[]" << std::endl;
    for (size_t i = 0; i < v.FinishFilling.size(); ++i)
    {
      s << indent << "  FinishFilling[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.FinishFilling[i]);
    }
    s << indent << "StartServing[]" << std::endl;
    for (size_t i = 0; i < v.StartServing.size(); ++i)
    {
      s << indent << "  StartServing[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.StartServing[i]);
    }
    s << indent << "FinishServing[]" << std::endl;
    for (size_t i = 0; i < v.FinishServing.size(); ++i)
    {
      s << indent << "  FinishServing[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.FinishServing[i]);
    }
    s << indent << "TimeFilling[]" << std::endl;
    for (size_t i = 0; i < v.TimeFilling.size(); ++i)
    {
      s << indent << "  TimeFilling[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.TimeFilling[i]);
    }
    s << indent << "TimeServing[]" << std::endl;
    for (size_t i = 0; i < v.TimeServing.size(); ++i)
    {
      s << indent << "  TimeServing[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.TimeServing[i]);
    }
    s << indent << "ConfirmServing[]" << std::endl;
    for (size_t i = 0; i < v.ConfirmServing.size(); ++i)
    {
      s << indent << "  ConfirmServing[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ConfirmServing[i]);
    }
    s << indent << "ConfirmFilling[]" << std::endl;
    for (size_t i = 0; i < v.ConfirmFilling.size(); ++i)
    {
      s << indent << "  ConfirmFilling[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ConfirmFilling[i]);
    }
    s << indent << "Task: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Task);
    s << indent << "TaskFilling: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TaskFilling);
    s << indent << "Happiness[]" << std::endl;
    for (size_t i = 0; i < v.Happiness.size(); ++i)
    {
      s << indent << "  Happiness[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Happiness[i]);
    }
    s << indent << "Efficiency[]" << std::endl;
    for (size_t i = 0; i < v.Efficiency.size(); ++i)
    {
      s << indent << "  Efficiency[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Efficiency[i]);
    }
    s << indent << "Severity[]" << std::endl;
    for (size_t i = 0; i < v.Severity.size(); ++i)
    {
      s << indent << "  Severity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Severity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFF_DRIVE_ROBOT_MESSAGE_HUMANROBOTINTERACTION_H
